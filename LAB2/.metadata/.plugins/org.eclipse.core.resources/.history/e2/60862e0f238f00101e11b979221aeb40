/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ON 0
#define OFF 1
#define SEG1 0
#define SEG2 1
#define SEG3 2
#define SEG4 3
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void display7SEG(int num0);
void exer1();
void exer2();
void exer4();
void update7SEG ( int index );
void   updateClockBuffer () ;
void updateLEDMatrix (int index );
void init_matrix_led();
void set_matrix_row(int index);
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
uint8_t  counter = 0;
uint8_t time = 0;
uint8_t status = SEG1;
const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1 , 2 , 3 , 4};
int hour = 15 , minute = 8 , second = 50;
const int MAX_LED_MATRIX = 8;
 int index_led_matrix = 0;
 uint8_t matrix_buffer [8] = {0x70, // 0b01110000
		  0x88, // 0b10001000
		  0x88, // 0b10001000
		  0xF8, // 0b11111000
		  0x88, // 0b10001000
		  0x88, // 0b10001000
		  0x88, // 0b10001000
		  0x00   };
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int timer0_counter = 0;
int timer0_flag = 0;
 int TIMER_CYCLE = 10;

 void setTimer0 ( int duration ) {
	timer0_counter = duration / TIMER_CYCLE ;
	 timer0_flag = 0;
 }
 void timer_run () {
	 if( timer0_counter > 0) {
	 timer0_counter --;
	 if( timer0_counter == 0) timer0_flag = 1;
 }
  }
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
  init_matrix_led();
  //init 7SEG

  setTimer0(1000);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, OFF);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, OFF);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, OFF);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, OFF);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer0_flag){
		  setTimer0(1000);
		 second ++;

		 if ( second >= 60) {
		 second = 0;
		minute ++;

		 }
		if( minute >= 60) {
		 minute = 0;
		hour ++;
		}
		if( hour >=24) {
		 hour = 0;
		 }
		if(index_led >= 0 && index_led < 2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, OFF);
		if(index_led >= 2 && index_led <=3) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ON);
		updateClockBuffer () ;
		update7SEG(index_led++);



	  }



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{

	 timer_run();
	 updateLEDMatrix(index_led_matrix);

}
 void updateLEDMatrix (int index ){
	init_matrix_led();
	 switch(index){
	 case 0:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
		 break;
	 case 1:
		 set_matrix_row(matrix_buffer[index]);
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
		 break;
	 case 2:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
		 break;
	 case 3:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
		 break;
	 case 4:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
		 break;
	 case 5:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, 0);
		 break;
	 case 6:
		 set_matrix_row(matrix_buffer[index]);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 0);
		 break;
	 case 7:
		 set_matrix_row(matrix_buffer[index]);
		 index_led_matrix = 0;
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
		 break;
	 default: break;
	 }
 }
 void init_matrix_led(){
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
			 |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 , 1);
 }
void set_matrix_row(int value){
	for(int r = 0; r < 8; r++){
		if(value & (1 << r)){
	            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 << r , 0);
		} else {
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 << r , 1);
		}

	}

}
 void   updateClockBuffer() {
 	led_buffer[0] = hour /10;
 	led_buffer[1] = hour % 10;
 	led_buffer[2] = minute/10;
 	led_buffer[3] = minute % 10;
 }
void exer4(){
	counter --;
		if(counter <= 0){
			counter = 100;
			time ++;
	   switch(index_led){
	   case 0:
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, OFF);
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, OFF);
		   break;
	   case 1:
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, OFF);
		   break;
	   case 2:
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ON);
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, OFF);
		   break;
	   case 3:
		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, OFF);

		   break;
	   default: break;
	   }
	   update7SEG(index_led++);
		}
}
 void exer1(){
	 counter --;
	 	 if(counter <= 0){
	 		 counter = 50;
	 	 switch(status){
	 	 case SEG1:
	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ON); //Enable SEG7
	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, OFF);
	 		 display7SEG(1);
	 		 status = SEG2;
	 		 break;
	 	 case SEG2:
	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ON); //Enable SEG7
	 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, OFF);
	 		 display7SEG(2);
	 		 status = SEG1;
	 		 break;
	 	 default: break;
	 	 }
	 	 }
 }
 void exer2(){
	 counter --;
		 if(counter <= 0){
			 counter = 50;
		 switch(status){
		 case SEG1:
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, OFF);
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ON); //Enable  1 SEG7
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, OFF);
			 display7SEG(1);
			 status = SEG2;
			 break;
		 case SEG2:
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ON); //Enable  2 SEG7
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, OFF);
			 display7SEG(2);
			 status = SEG3;
			 break;
		 case SEG3:
			 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ON);
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, OFF); //Enable SEG7
		 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ON);
		 		 display7SEG(3);
		 		 status = SEG4;

		 		 break;
		 case SEG4:
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, OFF); //Enable SEG7
						 		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ON);
						 		 display7SEG(0);
						 		 status = SEG1;
						 		 break;
		 default: break;
		 }
		 }
 }
void update7SEG ( int index ){
	switch ( index ) {
	 case 0:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ON);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, OFF);
		 display7SEG(led_buffer[0]);
	 // Display the first 7 SEG with led_buffer [0]
	 break ;
	 case 1:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ON);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, OFF);
		 display7SEG(led_buffer[1]);
	 // Display the second 7 SEG with led_buffer [1]
	 break ;
	 case 2:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ON);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, OFF);
		 display7SEG(led_buffer[2]);
	 // Display the third 7 SEG with led_buffer [2]
	 break ;
	 case 3:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ON);
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, OFF);
		 display7SEG(led_buffer[3]);
		 index_led = 0;
	 // Display the forth 7 SEG with led_buffer [3]
	 break ;
	 default :
	 break ;
 }
}

 void display7SEG(int num){
	 switch(num){
	 	case 0:

	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, OFF);
	 		break;
	 	case 1:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, OFF);
	 		break;
	 	case 2:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 3:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 4:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 5:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 6:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 7:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, OFF);
	 		break;
	 	case 8:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	case 9:
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, OFF);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ON);
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ON);
	 		break;
	 	default: break;

	 	}
 }
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
